{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","evento","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","htmlFor","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIninciales","JSON","parse","localStorage","getItem","console","log","citas","guardarCitas","useEffect","setItem","stringify","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.36b1752d.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({ crearCita }) => {\n  const [cita, actualizarCita] = useState({\n    mascota: \"\",\n    propietario: \"\",\n    fecha: \"\",\n    hora: \"\",\n    sintomas: \"\",\n  });\n  const [error, actualizarError] = useState(false);\n\n  const actualizarState = (evento) => {\n    actualizarCita({\n      ...cita,\n      [evento.target.name]: evento.target.value,\n    });\n  };\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n  \n  const submitCita = (evento) => {\n    evento.preventDefault();\n    //validar\n    if (\n      mascota.trim() === \"\" ||\n      propietario.trim() === \"\" ||\n      fecha.trim() === \"\" ||\n      hora.trim() === \"\" ||\n      sintomas.trim() === \"\"\n    ) {\n      actualizarError(true);\n      return;\n    }\n    actualizarError(false);\n    //Asignar una ID\n    cita.id = uuidv4();\n    // actualizarCita({\n    //   ...cita,\n    //   id: uuidv4(),\n    // });\n    //crear cita\n    crearCita(cita);\n    actualizarCita({\n      mascota: \"\",\n      propietario: \"\",\n      fecha: \"\",\n      hora: \"\",\n      sintomas: \"\",\n    });\n  };\n  return (\n    <Fragment>\n      <h2>Crear Cita</h2>\n      {error ? (\n        <p className=\"alerta-error\">Todos los campos son obligatorios</p>\n      ) : null}\n      <form onSubmit={submitCita}>\n        <label htmlFor=\"\">Nombre Mascota</label>\n        <input\n          type=\"text\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          onChange={actualizarState}\n          value={mascota}\n        />\n        <label htmlFor=\"\">Nombre Dueño</label>\n        <input\n          type=\"text\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Dueno de la Mascota\"\n          onChange={actualizarState}\n          value={propietario}\n        />\n        <label htmlFor=\"\">Fecha</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fecha}\n        />\n        <label htmlFor=\"\">Hora</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={hora}\n        />\n        <textarea\n          name=\"sintomas\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={sintomas}\n        ></textarea>\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Agregar Cita\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired\n}\n\n\nexport default Formulario;\n","import React from \"react\";\n\nconst Cita = ({ cita, eliminarCita }) => {\n  return (\n    <div className=\"cita\">\n      <p>\n        Mascota: <span>{cita.mascota}</span>\n      </p>\n      <p>\n        Dueño: <span>{cita.propietario}</span>\n      </p>\n      <p>\n        Fecha: <span>{cita.fecha}</span>\n      </p>\n      <p>\n        Hora: <span>{cita.hora}</span>\n      </p>\n      <p>\n        Sintomas: <span>{cita.sintomas}</span>\n      </p>\n      <button className=\"button eliminar u-full-width\" onClick={() => eliminarCita(cita.id)}>\n        Eliminar &times;\n      </button>\n    </div>\n  );\n};\n\nexport default Cita;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Cita from \"./components/Cita\";\n\nconst App = () => {\n  //citas en local storage\n  let citasIninciales = JSON.parse(localStorage.getItem(\"citas\"));\n  console.log(typeof citasIninciales);\n  if (!citasIninciales) {\n    citasIninciales = [];\n    console.log(typeof citasIninciales);\n  }\n  const [citas, guardarCitas] = useState(citasIninciales);\n\n  useEffect(() => {\n    console.log(\"useEffect\");\n    console.log(citasIninciales);\n    if (citasIninciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n      console.log(\"con citas\");\n      console.log(citasIninciales);\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([citas]));\n    }\n  }, [citas,citasIninciales]);\n\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n  const eliminarCita = (id) => {\n    guardarCitas(citas.filter((cita) => cita.id !== id));\n  };\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administra tus citas\";\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}